{"version":3,"sources":["webpack://@bldr/markdown-to-html/./src/main.ts","webpack://@bldr/markdown-to-html/external \"jsdom\"","webpack://@bldr/markdown-to-html/external \"marked\"","webpack://@bldr/markdown-to-html/webpack/bootstrap","webpack://@bldr/markdown-to-html/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,2DAAgC;AAEhC,eAAe;AACf,0DAA6B;AAE7B,MAAM,SAAS,GAAG,IAAI,aAAK,EAAE,CAAC,MAAM,CAAC,SAAS;AAC9C,UAAU;AAEV;;GAEG;AACH,SAAS,mBAAmB,CAAE,IAAY;IACxC,OAAO,IAAI;QACT,sCAAsC;SACrC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACrB,sCAAsC;SACrC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;QACpB,qCAAqC;SACpC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACxB,CAAC;AAED;;;;;;;;;GASG;AACH,SAAS,eAAe,CAAE,IAAY;IACpC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACnB,MAAM,GAAG,GAAG,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,WAAW,CAAC;IAC9D,kDAAkD;IAClD,IAAI,GAAG,CAAC,IAAI,CAAC,iBAAiB,KAAK,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,GAAG,EAAE;QAC5E,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS;KACtC;SAAM;QACL,OAAO,GAAG,CAAC,IAAI,CAAC,SAAS;KAC1B;AACH,CAAC;AAED;;;;GAIG;AACH,SAAgB,yBAAyB,CAAE,IAAY;IACrD,OAAO,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;AACnD,CAAC;AAFD,8DAEC;AAID;;;;;;GAMG;AACH,SAAgB,sBAAsB,CAAE,KAAU;IAChD,SAAS;IACT,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,yBAAyB,CAAC,KAAK,CAAC;QAEzC,QAAQ;KACP;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QAC/B,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACjD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;YAC1B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,KAAK,CAAC,KAAK,CAAC,GAAG,yBAAyB,CAAC,KAAK,CAAC;aAChD;iBAAM;gBACL,sBAAsB,CAAC,KAAK,CAAC;aAC9B;SACF;QAEH,SAAS;KACR;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QACpC,KAAK,MAAM,GAAG,IAAI,KAAK,EAAE;YACvB,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC;YACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,KAAK,CAAC,GAAG,CAAC,GAAG,yBAAyB,CAAC,KAAK,CAAC;aAC9C;iBAAM;gBACL,sBAAsB,CAAC,KAAK,CAAC;aAC9B;SACF;KACF;IACD,OAAO,KAAK;AACd,CAAC;AA5BD,wDA4BC;;;;;;;;;;;;;;ACxFD,mC;;;;;;;;;;;;;ACAA,oC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;UCrBA;UACA;UACA;UACA","file":"main.js","sourcesContent":["import * as marked from 'marked'\n\n///////////////\nimport { JSDOM } from 'jsdom'\n\nconst DOMParser = new JSDOM().window.DOMParser\n//////////\n\n/**\n * @param text - The raw input text coming directly form YAML\n */\nfunction convertCustomMarkup (text: string): string {\n  return text\n    // ↔ 8596 2194 &harr; LEFT RIGHT ARROW\n    .replace(/<->/g, '↔')\n    // → 8594 2192 &rarr; RIGHTWARDS ARROW\n    .replace(/->/g, '→')\n    // ← 8592 2190 &larr; LEFTWARDS ARROW\n    .replace(/<-/g, '←')\n}\n\n/**\n * Convert a string from Markdown to HTML. Automatically generate a\n * inline version (without surrounding `<p></p>`) if the text consists\n * of only one paragraph.\n *\n * Other no so stable solution:\n * https://github.com/markedjs/marked/issues/395\n *\n * @param text - The raw input text coming directly from YAML.\n */\nfunction convertMarkdown (text: string): string {\n  text = marked(text)\n  const dom = new DOMParser().parseFromString(text, 'text/html')\n  // Solution using the browser only implementation.\n  if (dom.body.childElementCount === 1 && dom.body.children[0].tagName === 'P') {\n    return dom.body.children[0].innerHTML\n  } else {\n    return dom.body.innerHTML\n  }\n}\n\n/**\n * Convert a string from the Markdown format into the HTML format.\n *\n * @param text - A string in the Markdown format.\n */\nexport function convertMarkdownFromString (text: string): string {\n  return convertMarkdown(convertCustomMarkup(text))\n}\n\ntype Any = string | string[] | { [key: string]: Any }\n\n/**\n * Convert the specifed text to HTML. At the moment Markdown and HTML formats\n * are supported. The conversion is done in a recursive fashion, that means\n * nested strings are also converted.\n *\n * @param input - Various input types\n */\nexport function convertMarkdownFromAny (input: Any): Any {\n  // string\n  if (typeof input === 'string') {\n    return convertMarkdownFromString(input)\n\n  // array\n  } else if (Array.isArray(input)) {\n    for (let index = 0; index < input.length; index++) {\n      const value = input[index]\n      if (typeof value === 'string') {\n        input[index] = convertMarkdownFromString(value)\n      } else {\n        convertMarkdownFromAny(value)\n      }\n    }\n\n  // object\n  } else if (typeof input === 'object') {\n    for (const key in input) {\n      const value = input[key]\n      if (typeof value === 'string') {\n        input[key] = convertMarkdownFromString(value)\n      } else {\n        convertMarkdownFromAny(value)\n      }\n    }\n  }\n  return input\n}\n","module.exports = require(\"jsdom\");;","module.exports = require(\"marked\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./src/main.ts\");\n"],"sourceRoot":""}